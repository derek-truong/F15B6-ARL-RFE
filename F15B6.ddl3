DROP SEQUENCE F15B6_Auth_seq ; 
create sequence F15B6_Auth_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15B6_Auth_PK_trig 
before insert on F15B6_Auth
for each row 
begin 
select F15B6_Auth_seq.nextval into :new.auth_id from dual; 
end; 
/
alter table F15B6_Auth add created date ; 
alter table F15B6_Auth add created_by VARCHAR2 (255) ; 
alter table F15B6_Auth add row_version_number integer ; 
alter table F15B6_Auth add updated date ; 
alter table F15B6_Auth add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15B6_Auth_AUD_trig 
before insert or update on F15B6_Auth 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE F15B6_Com_seq ; 
create sequence F15B6_Com_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15B6_Com_PK_trig 
before insert on F15B6_Com
for each row 
begin 
select F15B6_Com_seq.nextval into :new.com_id from dual; 
end; 
/
alter table F15B6_Com add created date ; 
alter table F15B6_Com add created_by VARCHAR2 (255) ; 
alter table F15B6_Com add row_version_number integer ; 
alter table F15B6_Com add updated date ; 
alter table F15B6_Com add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15B6_Com_AUD_trig 
before insert or update on F15B6_Com 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE F15B6_Doc_seq ; 
create sequence F15B6_Doc_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15B6_Doc_PK_trig 
before insert on F15B6_Doc
for each row 
begin 
select F15B6_Doc_seq.nextval into :new.doc_id from dual; 
end; 
/
alter table F15B6_Doc add created date ; 
alter table F15B6_Doc add created_by VARCHAR2 (255) ; 
alter table F15B6_Doc add row_version_number integer ; 
alter table F15B6_Doc add updated date ; 
alter table F15B6_Doc add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15B6_Doc_AUD_trig 
before insert or update on F15B6_Doc 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE F15B6_Emp_seq ; 
create sequence F15B6_Emp_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15B6_Emp_PK_trig 
before insert on F15B6_Emp
for each row 
begin 
select F15B6_Emp_seq.nextval into :new.emp_id from dual; 
end; 
/
alter table F15B6_Emp add created date ; 
alter table F15B6_Emp add created_by VARCHAR2 (255) ; 
alter table F15B6_Emp add row_version_number integer ; 
alter table F15B6_Emp add updated date ; 
alter table F15B6_Emp add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15B6_Emp_AUD_trig 
before insert or update on F15B6_Emp 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE F15B6_Ex_Req_seq ; 
create sequence F15B6_Ex_Req_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15B6_Ex_Req_PK_trig 
before insert on F15B6_Ex_Req
for each row 
begin 
select F15B6_Ex_Req_seq.nextval into :new.er_id from dual; 
end; 
/
alter table F15B6_Ex_Req add created date ; 
alter table F15B6_Ex_Req add created_by VARCHAR2 (255) ; 
alter table F15B6_Ex_Req add row_version_number integer ; 
alter table F15B6_Ex_Req add updated date ; 
alter table F15B6_Ex_Req add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15B6_Ex_Req_AUD_trig 
before insert or update on F15B6_Ex_Req 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE F15B6_Hist_seq ; 
create sequence F15B6_Hist_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15B6_Hist_PK_trig 
before insert on F15B6_Hist
for each row 
begin 
select F15B6_Hist_seq.nextval into :new.hist_id from dual; 
end; 
/
alter table F15B6_Hist add created date ; 
alter table F15B6_Hist add created_by VARCHAR2 (255) ; 
alter table F15B6_Hist add row_version_number integer ; 
alter table F15B6_Hist add updated date ; 
alter table F15B6_Hist add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15B6_Hist_AUD_trig 
before insert or update on F15B6_Hist 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE F15B6_Lab_seq ; 
create sequence F15B6_Lab_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15B6_Lab_PK_trig 
before insert on F15B6_Lab
for each row 
begin 
select F15B6_Lab_seq.nextval into :new.lab_id from dual; 
end; 
/
alter table F15B6_Lab add created date ; 
alter table F15B6_Lab add created_by VARCHAR2 (255) ; 
alter table F15B6_Lab add row_version_number integer ; 
alter table F15B6_Lab add updated date ; 
alter table F15B6_Lab add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15B6_Lab_AUD_trig 
before insert or update on F15B6_Lab 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE F15B6_RFE_seq ; 
create sequence F15B6_RFE_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15B6_RFE_PK_trig 
before insert on F15B6_RFE
for each row 
begin 
select F15B6_RFE_seq.nextval into :new.rfe_id from dual; 
end; 
/
alter table F15B6_RFE add created date ; 
alter table F15B6_RFE add created_by VARCHAR2 (255) ; 
alter table F15B6_RFE add row_version_number integer ; 
alter table F15B6_RFE add updated date ; 
alter table F15B6_RFE add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15B6_RFE_AUD_trig 
before insert or update on F15B6_RFE 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE F15B6_Roles_seq ; 
create sequence F15B6_Roles_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15B6_Roles_PK_trig 
before insert on F15B6_Roles
for each row 
begin 
select F15B6_Roles_seq.nextval into :new.role_id from dual; 
end; 
/
alter table F15B6_Roles add created date ; 
alter table F15B6_Roles add created_by VARCHAR2 (255) ; 
alter table F15B6_Roles add row_version_number integer ; 
alter table F15B6_Roles add updated date ; 
alter table F15B6_Roles add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15B6_Roles_AUD_trig 
before insert or update on F15B6_Roles 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE F15B6_Status_seq ; 
create sequence F15B6_Status_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15B6_Status_PK_trig 
before insert on F15B6_Status
for each row 
begin 
select F15B6_Status_seq.nextval into :new.status_id from dual; 
end; 
/
alter table F15B6_Status add created date ; 
alter table F15B6_Status add created_by VARCHAR2 (255) ; 
alter table F15B6_Status add row_version_number integer ; 
alter table F15B6_Status add updated date ; 
alter table F15B6_Status add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15B6_Status_AUD_trig 
before insert or update on F15B6_Status 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE F15B6_Task_seq ; 
create sequence F15B6_Task_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger F15B6_Task_PK_trig 
before insert on F15B6_Task
for each row 
begin 
select F15B6_Task_seq.nextval into :new.task_id from dual; 
end; 
/
alter table F15B6_Task add created date ; 
alter table F15B6_Task add created_by VARCHAR2 (255) ; 
alter table F15B6_Task add row_version_number integer ; 
alter table F15B6_Task add updated date ; 
alter table F15B6_Task add updated_by VARCHAR2 (255) ; 
/
create or replace trigger F15B6_Task_AUD_trig 
before insert or update on F15B6_Task 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

-- Table R5 has a compound primary key so no sequence or trigger was created for it.
-- Table R8v1 has a compound primary key so no sequence or trigger was created for it.
-- Table Relation_4 has a compound primary key so no sequence or trigger was created for it.
DROP INDEX F15B6_Emp_emp_id_FK_0 ;
CREATE INDEX F15B6_Emp_emp_id_FK_0 ON F15B6_Auth(F15B6_Emp_emp_id) ;
DROP INDEX F15B6_Emp_emp_id_FK_1 ;
CREATE INDEX F15B6_Emp_emp_id_FK_1 ON F15B6_Com(F15B6_Emp_emp_id) ;
DROP INDEX F15B6_RFE_rfe_id_FK_2 ;
CREATE INDEX F15B6_RFE_rfe_id_FK_2 ON F15B6_Com(F15B6_RFE_rfe_id) ;
DROP INDEX F15B6_RFE_rfe_id_FK_3 ;
CREATE INDEX F15B6_RFE_rfe_id_FK_3 ON F15B6_Doc(F15B6_RFE_rfe_id) ;
DROP INDEX F15B6_Auth_auth_id_FK_4 ;
CREATE INDEX F15B6_Auth_auth_id_FK_4 ON F15B6_Emp(F15B6_Auth_auth_id) ;
DROP INDEX F15B6_Lab_lab_id_FK_5 ;
CREATE INDEX F15B6_Lab_lab_id_FK_5 ON F15B6_Emp(F15B6_Lab_lab_id) ;
DROP INDEX F15B6_Roles_role_id_FK_6 ;
CREATE INDEX F15B6_Roles_role_id_FK_6 ON F15B6_Emp(F15B6_Roles_role_id) ;
DROP INDEX F15B6_RFE_rfe_id_FK_7 ;
CREATE INDEX F15B6_RFE_rfe_id_FK_7 ON F15B6_Ex_Req(F15B6_RFE_rfe_id) ;
DROP INDEX F15B6_RFE_rfe_id_FK_8 ;
CREATE INDEX F15B6_RFE_rfe_id_FK_8 ON F15B6_Hist(F15B6_RFE_rfe_id) ;
DROP INDEX F15B6_Status_status_id_FK_9 ;
CREATE INDEX F15B6_Status_status_id_FK_9 ON F15B6_Hist(F15B6_Status_status_id) ;
DROP INDEX F15B6_Emp_emp_id_FK_10 ;
CREATE INDEX F15B6_Emp_emp_id_FK_10 ON F15B6_RFE(F15B6_Emp_emp_id) ;
DROP INDEX F15B6_Status_status_id_FK_11 ;
CREATE INDEX F15B6_Status_status_id_FK_11 ON F15B6_RFE(F15B6_Status_status_id) ;
DROP INDEX F15B6_Task_task_id_FK_12 ;
CREATE INDEX F15B6_Task_task_id_FK_12 ON F15B6_RFE(F15B6_Task_task_id) ;
DROP INDEX F15B6_Emp_emp_id_FK_13 ;
CREATE INDEX F15B6_Emp_emp_id_FK_13 ON F15B6_Roles(F15B6_Emp_emp_id) ;
DROP INDEX F15B6_RFE_rfe_id_FK_14 ;
CREATE INDEX F15B6_RFE_rfe_id_FK_14 ON R8v1(F15B6_RFE_rfe_id) ;
DROP INDEX F15B6_Task_task_id_FK_15 ;
CREATE INDEX F15B6_Task_task_id_FK_15 ON R8v1(F15B6_Task_task_id) ;
DROP INDEX F15B6_RFE_rfe_id_FK_16 ;
CREATE INDEX F15B6_RFE_rfe_id_FK_16 ON Relation_4(F15B6_RFE_rfe_id) ;
DROP INDEX F15B6_Emp_emp_id_FK_17 ;
CREATE INDEX F15B6_Emp_emp_id_FK_17 ON Relation_4(F15B6_Emp_emp_id) ;
DROP INDEX F15B6_RFE_rfe_id_FK_18 ;
CREATE INDEX F15B6_RFE_rfe_id_FK_18 ON R5(F15B6_RFE_rfe_id) ;
DROP INDEX F15B6_Emp_emp_id_FK_19 ;
CREATE INDEX F15B6_Emp_emp_id_FK_19 ON R5(F15B6_Emp_emp_id) ;
